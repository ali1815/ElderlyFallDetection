import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import pickle
from sklearn.tree import DecisionTreeClassifier 
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier


try:
    from sklearn.model_selection import train_test_split
except:
    from sklearn.cross_validation import train_test_split

from sklearn.metrics import confusion_matrix, accuracy_score

class_label =  "activity"
dataset_name = "ConfLongDemo_JSI.csv"

data = pd.read_csv(dataset_name,header=None)
data.head()

#Changing the names of columns according to given data description

data.columns = ['Sequence_Name', 'Tag_identificator', 'timestamp', 'date_FORMAT', 
                'x_coordinate', 'y_coordinate', 'z_coordinate', 'activity']
                
data[class_label].value_counts()

data.info()

col_name = data.columns.values
col_name = list(col_name)
col_name

data.describe(include='all').T

cat = data.select_dtypes(include='object').columns.to_list() # Extracting all categorical values to list
cat.remove("date_FORMAT") # Removing Date 
for i in cat:
    print("Name of {} col".format(i)) # Name of Column
    print("No. of NUnique", data[i].nunique()) # Total Nunique Values
    print("Unique Values", data[i].unique()) # All unique values
    print('*'*30)
    print()
    print()
    
def encoding(df):

    from sklearn.preprocessing import LabelEncoder

    tag_encoder = LabelEncoder()
    sequence_encoder =  LabelEncoder()
    activity_encoder = LabelEncoder()

    df['Tag_identificator'] = tag_encoder.fit_transform(df['Tag_identificator'])
    df['Sequence_Name'] = sequence_encoder.fit_transform(df['Sequence_Name'])
    df['activity'] = activity_encoder.fit_transform(df['activity'])
    return "Successful"
    
for i in data.select_dtypes(include=['int64', 'float64']):
    sns.displot(data[i]) #displot for all Numerical Values to check how well data is distributed
    plt.show()
    
for i in data.select_dtypes(include=['int64', 'float64']):
    sns.histplot(data[i]) # Distribution plot to check how data is distributed
    plt.show()
    
fig = plt.figure()
ax = plt.axes(projection='3d') # 3D plot
ax.scatter3D(data['x_coordinate'],
         data['y_coordinate'],
         data['z_coordinate'],
         c = data['z_coordinate'], cmap='bone')
         
def new_col(df):
    
    from datetime import datetime as dt # Importing Datetime library
    
    # transforming Datetime Column to Date_time format
    df['date_FORMAT'] = pd.to_datetime(df['date_FORMAT'], format="%d.%m.%Y %H:%M:%S:%f")
    
    # Extracting day, month, year, hour, minute, second, microsecond from Date_time Column
    df['day'] = df['date_FORMAT'].dt.day
    df['month'] = df['date_FORMAT'].dt.month
    df['year'] = df['date_FORMAT'].dt.year
    df['hour'] = df['date_FORMAT'].dt.hour
    df['minute'] = df['date_FORMAT'].dt.minute
    df['second'] = df['date_FORMAT'].dt.second
    df['microsecond'] = df['date_FORMAT'].dt.microsecond
    
    del df['date_FORMAT'] # Removing Date_time Column
    return 'Successfull'
    
#Trasnforming our data

encoding(data)
new_col(data)

data.drop(['day', 'month', 'year'], axis=1, inplace=True)

col = ['hour', 'minute', 'second']

for i in col:
    print("Name of {} col".format(i)) # Name of Column
    print("No. of NUnique", data[i].nunique()) # Total N_Unique Values in Column
    print("Unique Values", data[i].unique()) # All Unique values in column
    print('*'*30)
    print()
    print()
    
for i in col:
    sns.histplot(data[i]) # Distribution plot to check how data is distributed
    plt.show()
    
data.shape # Shape of data

data.info()

df_x= data[['Sequence_Name','Tag_identificator','timestamp','x_coordinate','y_coordinate','z_coordinate','hour','minute','second','microsecond']]
df_y= data[class_label]

x_train, x_test, y_train, y_test = train_test_split(df_x, df_y, test_size=0.3)

len(x_train)
len(x_test)

dt = DecisionTreeClassifier(criterion = "entropy")
dt.fit(x_train,y_train)

pred=dt.predict(x_test)
pred

cm = confusion_matrix(list(y_test),list(pred))
cm

sns.heatmap(cm,annot=True,fmt="d")

a = accuracy_score(list(y_test),list(pred))
a

from sklearn.metrics import classification_report
print(classification_report(list(y_test),list(pred)))

neigh = KNeighborsClassifier(n_neighbors=1)
neigh.fit(x_train,y_train)
pred2 = neigh.predict(x_test)
cm = confusion_matrix(list(y_test),list(pred2))
sns.heatmap(cm,annot=True,fmt="d")
a = accuracy_score(list(y_test),list(pred2))
print("accuracy = ",a)

from sklearn.metrics import classification_report
print(classification_report(y_test,pred2))

clf = RandomForestClassifier(n_estimators = 1500, n_jobs=-1, max_depth=15, 
                             min_samples_split=5, min_samples_leaf=3)
clf.fit(x_train,y_train)

pred3 = clf.predict(x_test)
cm = confusion_matrix(list(y_test),list(pred3))
sns.heatmap(cm,annot=True,fmt="d")
a = accuracy_score(list(y_test),list(pred3))
print("accuracy = ",a)

from sklearn.metrics import classification_report
print(classification_report(list(y_test),list(pred3)))

from sklearn.svm import SVC
svm = SVC(C=1.0, kernel='linear', degree=10, gamma='scale', coef0=1.0, shrinking=True, max_iter=25, decision_function_shape='ovo',  random_state=5)
svm.fit(x_train,y_train)
pred4 = svm.predict(x_test)
cm = confusion_matrix(list(y_test),list(pred4))
sns.heatmap(cm,annot=True,fmt="d")
a = accuracy_score(list(y_test),list(pred4))
print("accuracy = ",a)

from sklearn.metrics import classification_report
print(classification_report(list(y_test),list(pred4)))

from sklearn.naive_bayes import BernoulliNB
nb1 = BernoulliNB(alpha=1.0, binarize=0.9, fit_prior=True, class_prior=None)
nb1.fit(x_train,y_train)
pred7 = nb1.predict(x_test)
cm = confusion_matrix(list(y_test),list(pred7))
sns.heatmap(cm,annot=True,fmt="d")
a = accuracy_score(list(y_test),list(pred7))
print("accuracy = ",a)

from xgboost import XGBClassifier, XGBRFClassifier
xgb = XGBClassifier(n_estimators = 1500, nthread  = 4, max_depth = 15, min_child_weight = 5, learning_rate=0.01)
xgb.fit(x_train,y_train)
pred8 = nb1.predict(x_test)
cm = confusion_matrix(list(y_test),list(pred8))
sns.heatmap(cm,annot=True,fmt="d")
a = accuracy_score(list(y_test),list(pred8))
print("accuracy = ",a)
